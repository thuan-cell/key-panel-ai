const REGISTERED_USERS_STORAGE_KEY = 'registeredUsers';
const CURRENT_USER_STORAGE_KEY = 'currentUser';
const ADMIN_GRANTED_KEY = 'admin_granted';

// L·∫•y danh s√°ch ng∆∞·ªùi d√πng t·ª´ Local Storage
function getRegisteredUsers() {
  try {
    const usersJson = localStorage.getItem(REGISTERED_USERS_STORAGE_KEY);
    return usersJson ? JSON.parse(usersJson) : [];
  } catch (e) {
    console.error("‚ùå L·ªói khi ƒë·ªçc ng∆∞·ªùi d√πng t·ª´ Local Storage:", e);
    return [];
  }
}

// L∆∞u danh s√°ch ng∆∞·ªùi d√πng v√†o Local Storage
function saveRegisteredUsers(users) {
  try {
    localStorage.setItem(REGISTERED_USERS_STORAGE_KEY, JSON.stringify(users));
  } catch (e) {
    console.error("‚ùå Kh√¥ng th·ªÉ l∆∞u ng∆∞·ªùi d√πng:", e);
    Swal.fire("L·ªói", "Kh√¥ng th·ªÉ l∆∞u danh s√°ch ng∆∞·ªùi d√πng.", "error");
  }
}

// L∆∞u ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p
function saveCurrentUser(user) {
  try {
    if (user && user.password) delete user.password;
    localStorage.setItem(CURRENT_USER_STORAGE_KEY, JSON.stringify(user));
  } catch (e) {
    console.error("‚ùå Kh√¥ng th·ªÉ l∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p:", e);
    Swal.fire("L·ªói", "Kh√¥ng th·ªÉ l∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p.", "error");
  }
}

// Xo√° th√¥ng tin ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p
function removeCurrentUser() {
  localStorage.removeItem(CURRENT_USER_STORAGE_KEY);
}

// Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
function checkAuthStatus() {
  try {
    const currentUser = JSON.parse(localStorage.getItem(CURRENT_USER_STORAGE_KEY));
    return currentUser && currentUser.username;
  } catch {
    return false;
  }
}

// ƒêƒÉng nh·∫≠p
function login() {
  const username = document.getElementById("username").value.trim();
  const password = document.getElementById("password").value.trim();

  if (!username || !password) {
    Swal.fire("L·ªói", "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u", "error");
    return;
  }

  const users = getRegisteredUsers();
  const user = users.find(u => u.username === username);
  const hashed = CryptoJS.SHA256(password).toString();

  if (user && user.password === hashed) {
    saveCurrentUser({ username: user.username });
    Swal.fire("Th√†nh c√¥ng", "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", "success").then(() => {
      window.location.href = '/index.html';
    });
  } else {
    Swal.fire("L·ªói", "T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng", "error");
  }
}

// ƒêƒÉng k√Ω
function register() {
  if (typeof $ === 'undefined' || typeof CryptoJS === 'undefined') {
    Swal.fire("L·ªói", "Th∆∞ vi·ªán c·∫ßn thi·∫øt ch∆∞a ƒë∆∞·ª£c t·∫£i", "error");
    return;
  }

  const username = $("#reg_username").val().trim();
  const password = $("#reg_password").val().trim();
  const confirm = $("#reg_confirm").val().trim();

  if (!username || !password || !confirm) {
    Swal.fire("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin", "error");
    return;
  }

  if (password !== confirm) {
    Swal.fire("L·ªói", "M·∫≠t kh·∫©u kh√¥ng kh·ªõp", "error");
    return;
  }

  const users = getRegisteredUsers();
  if (users.find(u => u.username === username)) {
    Swal.fire("L·ªói", "T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i", "error");
    return;
  }

  const hashedPassword = CryptoJS.SHA256(password).toString();
  users.push({ username, password: hashedPassword });
  saveRegisteredUsers(users);

  Swal.fire("Th√†nh c√¥ng", "ƒêƒÉng k√Ω th√†nh c√¥ng!", "success").then(() => {
    $("#reg_username, #reg_password, #reg_confirm").val('');
    showLogin();
  });
}

// ƒêƒÉng xu·∫•t
function logout() {
  removeCurrentUser();
  localStorage.removeItem(ADMIN_GRANTED_KEY);
  Swal.fire("Th√¥ng b√°o", "ƒêƒÉng xu·∫•t th√†nh c√¥ng!", "info").then(() => {
    window.location.href = '/auth.html';
  });
}

// Hi·ªÉn th·ªã form
function showRegister() {
  $("#loginForm").hide();
  $("#registerForm").show();
}
function showLogin() {
  $("#registerForm").hide();
  $("#loginForm").show();
}

// üîê Ki·ªÉm tra quy·ªÅn admin ‚Üí l∆∞u localStorage
async function checkAdminAccess() {
  try {
    const res = await fetch("/api/access-status");
    if (!res.ok) throw new Error("L·ªói truy v·∫•n server");
    const data = await res.json();

    const granted = !!data.admin_granted;
    localStorage.setItem(ADMIN_GRANTED_KEY, granted ? "true" : "false");
    return granted;
  } catch (e) {
    console.error("‚ùå L·ªói ki·ªÉm tra quy·ªÅn admin:", e);
    localStorage.setItem(ADMIN_GRANTED_KEY, "false");
    return false;
  }
}
